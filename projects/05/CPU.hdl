// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU{

    IN  inM[16],          /* M value input  (M = contents of RAM[A])  */
		instruction[16],  /* Instruction for execution                */
		reset;            /* Signals whether to re-start the current  */
                          /* program (reset==1) or continue executing */
                          /* the current program (reset==0).          */
                             
    OUT outM[16],         /* M value output                           */
		writeM,           /* Write to M?                              */
		addressM[15],     /* Address in data memory (of M)            */
		pc[15];           /* address of next instruction              */

    PARTS:

	/* D Register*/
	And(a = instruction[4], b = instruction[15], out = loadDregister); /* load bit for DRegister*/
	DRegister(in = aluout, load = loadDregister, out = dregisterout);

	Not(in = instruction[15], out = instruction15not); /* selector for the Mux*/
	Mux16(a = aluout, b[0..14] = instruction[0..14], b[15] = false, sel = instruction15not, out = aregisterin); /* Mux16 */

	/* A Register*/
	Or(a = instruction[5], b = instruction15not, out = aregisterload);
	ARegister(in = aregisterin, load = aregisterload, out = aregisterout);

	Mux16(a = aregisterout, b = inM, sel = instruction[12], out = muxout); /* Mux16 */

	ALU(x = dregisterout, y = muxout, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8],
		f = instruction[7], no = instruction[6], out = aluout, zr = zero, ng = negative);

	/* program counter*/
	PC(in = aregisterout, load = loadcounter, inc = increment, reset = reset, out[0..14] = pc);

	/* output signal to load the memory*/
	And(a = instruction[3], b = instruction[15], out = writeM);

	/* output signal to address memory*/
	And16(a = aregisterout, b = true, out[0..14] = addressM);

	/* out to memory*/
	And16(a = aluout, b = true, out = outM);

	/*signal to increment the counter*/
	Not(in = instruction[0], out = out0);
	Not(in = instruction[1], out = out1);
	Not(in = instruction[2], out = out2);
	Or(a = out0, b = out1, out = out3);
	Or(a = out2, b = out3, out = out4);
	Or(a = instruction15not, b = out4, out = increment);

	/* signal to load the counter*/
	Not(in = zero, out = zeronot);
	Not(in = negative, out = ngnot);
	And(a = zeronot, b = ngnot, out = gt); /* greater than zero*/

	And(a = gt, b = instruction[0], out = gtand);
	And(a = zero, b = instruction[1], out = zeroand);
	And(a = negative, b = instruction[2], out = ngand);
	Or(a = gtand, b = zeroand, out = gtzeroor);
	Or(a = gtzeroor, b = ngand, out = loadcounter1);
	And(a = loadcounter1, b = instruction[15], out = loadcounter);
}
